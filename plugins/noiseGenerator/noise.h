#pragma once

#include <map>
#include <wx/event.h>
#include <list>
#include <queue>
#include <memory>
#ifdef __WXGTK__
#include <random>
#endif

#include "niir.h"

/** @file paex_pink.c
	@ingroup examples_src
	@brief Generate Pink Noise using Gardner method.

	Optimization suggested by James McCartney uses a tree
	to select which random value to replace.
<pre>
	x x x x x x x x x x x x x x x x
	x   x   x   x   x   x   x   x
	x       x       x       x
	 x               x
	   x
</pre>
	Tree is generated by counting trailing zeros in an increasing index.
	When the index is zero, no random number is selected.

	@author Phil Burk  http://www.softsynth.com
*/
/*
 * $Id: paex_pink.c 1752 2011-09-08 03:21:55Z philburk $
 *
 * This program uses the PortAudio Portable Audio Library.
 * For more information see: http://www.portaudio.com
 * Copyright (c) 1999-2000 Ross Bencina and Phil Burk
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * The text above constitutes the entire PortAudio license; however,
 * the PortAudio community also makes the following non-binding requests:
 *
 * Any person wishing to distribute modifications to the Software is
 * requested to send the modifications to the original developer so that
 * they can be incorporated into the canonical version. It is also
 * requested that these non-binding requests be included along with the
 * license above.
 */

class timedbuffer;
class GeneratorPluginBuilder;

class IIR;
class KFilter;



class Noise
{
    public:
        Noise() : m_dNoiseAmplitude(0.12589){}
        virtual ~Noise(){}

        void SetAmplitude(float ddBFS);

        virtual float ProduceSample()=0;

    protected:
        float m_dNoiseAmplitude;
};


class WhiteNoise : public Noise
{
    public:
        WhiteNoise();
        ~WhiteNoise();

        virtual float ProduceSample() override;
};

class PinkNoise : public Noise
{
    public:
        PinkNoise();
        ~PinkNoise();

        float ProduceSample() override;

    private:
        void Initialize(int numRows);

        static const unsigned int PINK_RANDOM_BITS       = 24;
        static const unsigned int PINK_RANDOM_SHIFT      = 8;


        long      m_pinkRows[30];
        long      m_pinkRunningSum;   /* Used to optimize summing of generators. */
        int       m_pinkIndex;        /* Incremented each sample. */
        int       m_pinkIndexMask;    /* Index wrapped by ANDing with this mask. */
        float     m_pinkScalar;       /* Used to scale within range of -1.0 to +1.0 */

};


class GreyNoise : public WhiteNoise
{
    public:
        GreyNoise();
        ~GreyNoise();

        float ProduceSample() override;

    private:
        IIR m_filter;

        static const double ANFILTER_B[3];
        static const double ANFILTER_A[2];
};

class GreyANoise : public WhiteNoise
{
    public:
        GreyANoise();
        ~GreyANoise();

        float ProduceSample() override;

    private:
        IIR m_filter;

        static const double AFILTER_B[7];
        static const double AFILTER_A[6];
};

class GreyKNoise : public WhiteNoise
{
    public:
        GreyKNoise();
        ~GreyKNoise();

        float ProduceSample() override;

    private:
        KFilter m_filter;

};
